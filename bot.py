import asyncio
import logging
import os
import psycopg2
from psycopg2.extras import RealDictCursor
import urllib.parse as up
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from fastapi import FastAPI, Request
import uvicorn

# -------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—Ç
# -------------------------------
TOKEN = "8400963211:AAHGgS1GvY34nlkzWVb7XHPkh1CzP_Jwj24"
COURIER_ID = 1452105851
DB_URL = os.getenv(
    "DATABASE_URL",
    "postgresql://lol_bot_mine_user:zaNVubL3czJHIQcdZWK1TNRMiBj0BAf9@dpg-d361tfnfte5s739cd29g-a.oregon-postgres.render.com/lol_bot_mine"
)
WEBHOOK_URL = "https://mine-bot-ntqg.onrender.com/webhook"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

# -------------------------------
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ü–æ—Å—Ç–≥—Ä–µ—Å
# -------------------------------
def get_conn():
    up.uses_netloc.append("postgres")
    url = up.urlparse(DB_URL)

    return psycopg2.connect(
        database=url.path[1:],
        user=url.username,
        password=url.password,
        host=url.hostname,
        port=url.port or 5432,
        sslmode="require",
        cursor_factory=RealDictCursor
    )

def init_db():
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            item TEXT NOT NULL,
            quantity INT NOT NULL DEFAULT 1,
            price INT,
            status TEXT NOT NULL
        );
    """)
    conn.commit()
    cur.close()
    conn.close()

# -------------------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–∞—Ç
# -------------------------------
class OrderState(StatesGroup):
    waiting_for_item = State()
    waiting_for_quantity = State()

# -------------------------------
# –†–æ—É—Ç–µ—Ä
# -------------------------------
router = Router()

# -------------------------------
# –ö–æ–º–∞–Ω–¥—ã
# -------------------------------
@router.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–°–ê–õ–ê–ú –ê–õ–ï–ô–ö–£–ú –ë–†–ê–ê–ê–¢ ü§≤ü§≤ –≠–¢–û –ë–û–¢ –î–ï–õ–ê –ö–ê–ö –ó–ê–ö–ê–ó–´–í–ê–ô –ü–†–ï–î–ú–ï–¢ –ö–û–¢–û –ú–û–ñ –î–û–ë–£–¢–¨ –í–´–ñ–ò–í–ê–ù–ò–ï, –ö–ê–°–¢–†–ê–¶–ò–Ø –ú–´–®–¨ –°–ï–ô–ß–ê–° –ù–ï–¢ –ë–†–ê–¢, –ü–û–¢–û–ú –ë–£–î–ï–¢ –ê–õ–õ–ê–• –ó–ù–ê–ï–¢. –ó–ê–ö–ê–ó /order –ë–†–ê–¢–ò–®–¨–ö–ê–ê–ê")

@router.message(Command("order"))
async def order_cmd(message: types.Message, state: FSMContext):
    await message.answer("–ë–†–ê–ê–¢, –ö–ê–ö–û–ô –ü–†–ï–î–ú–ï–¢ –¢–´ –•–û–ß?? üóø –ü–ò–®–ò –ù–ê–ó–í–ê–ù–ò–ï –¢–û–ß–ù–û –ö–ê–ö –í –ò–ì–†–ê –ë–ï–ó –§–ê–ù–¢–ê–ó–ò–Ø, –ù–ï –£–ú–ù–ò–ß–ê–ô")
    await state.set_state(OrderState.waiting_for_item)

@router.message(OrderState.waiting_for_item)
async def process_item(message: types.Message, state: FSMContext):
    await state.update_data(item=message.text.strip())
    await message.answer("–°–ö–û–õ–¨–ö–û –®–¢–£–ö–ê –ù–ê–î–û –¢–ï–ë–ï, –ë–†–ê–¢?? –¶–ò–§–†–ê –ü–ò–®–ò, –ù–ï –ë–£–ö–í–ê")
    await state.set_state(OrderState.waiting_for_quantity)

@router.message(OrderState.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
    except:
        await message.answer("–≠–≠–≠ –ë–†–ê–¢ ü§¶‚Äç‚ôÇÔ∏è –¢–´ –¶–ò–§–†–ê –ü–ò–®–ò, –ù–ê–ü–†–ò–ú–ï–†: 10, –ù–ï –ê–ë–†–ê–ö–ê–î–ê–ë–†–ê")
        return

    data = await state.get_data()
    item = data["item"]

    conn = get_conn()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO orders (user_id, item, quantity, status) VALUES (%s, %s, %s, %s) RETURNING id",
        (message.from_user.id, item, quantity, "waiting_price")
    )
    order_id = cur.fetchone()["id"]
    conn.commit()
    cur.close()
    conn.close()

    await message.answer(f"üìù –¢–í–û–ô –ó–ê–ö–ê–ó –ó–ê–ü–ò–°–ê–õ –ë–†–ê–¢!\n–ü–†–ï–î–ú–ï–¢: {item}\n–ö–û–õ–ò–ß–ï–°–¢–í–û: {quantity}\n–ñ–î–ò, –ú–ò–•–ê–ò–õ–ò–ö –°–ö–û–†–û –¶–ï–ù–ê –°–ö–ê–ñ–ï–¢, –ù–ï –ù–ï–†–í–ò–†–û–í–ê–ô–°–Ø")
    await state.clear()

    await message.bot.send_message(COURIER_ID, f"üö® –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}: {item} x{quantity}\n–û–¢ –ö–õ–ò–ï–ù–¢ {message.from_user.id}, –î–í–ò–ñ–ï–ù–ò–ï –ù–ê–î–û –°–î–ï–õ–ê–¢–¨ –ë–´–°–¢–†–û")

# -------------------------------
# –ö—É—Ä—å–µ—Ä —Ü–µ–Ω—É —Å—Ç–∞–≤–∏—Ç
# -------------------------------
@router.message(Command("answer"))
async def answer_cmd(message: types.Message):
    if message.from_user.id != COURIER_ID:
        return

    try:
        _, order_id, price = message.text.split()
        order_id = int(order_id)
        price = int(price)
    except:
        await message.answer("–§–û–†–ú–ê–¢ –ü–†–ê–í–ò–õ–¨–ù–û –ü–ò–®–ò –ë–†–ê–¢ üëâ /answer order_id price")
        return

    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE id = %s AND status = %s", (order_id, "waiting_price"))
    row = cur.fetchone()

    if not row:
        await message.answer("–≠–≠ –ë–†–ê–¢ ü§® –¢–ê–ö–û–ô –ó–ê–ö–ê–ó –ù–ï–¢–£, –¢–´ –í–†–£–ù?")
        return

    cur.execute("UPDATE orders SET price = %s, status = %s WHERE id = %s", (price, "waiting_user_confirm", order_id))
    conn.commit()
    cur.close()
    conn.close()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–ê–ê–ê –ë–†–ê–¢ ‚úÖ", callback_data=f"accept_{order_id}")],
            [InlineKeyboardButton(text="–ò–î–ò –ù–ê–•–£–ô –î–û–†–û–ì–ê üí∏‚ùå", callback_data="reject")]
        ]
    )
    await message.bot.send_message(row["user_id"], f"üí∞ –ë–†–ê–¢, –¶–ï–ù–ê –ì–û–¢–û–í–ê: {price} –ú–û–ù–ï–¢ –ó–ê {row['quantity']} –®–¢–£–ö–ê. –ù–û–†–ú–ê–õ–¨–ù–û??", reply_markup=keyboard)
    await message.answer("üì® –¶–ï–ù–ê –û–¢–ü–†–ê–í–ò–õ –ö–õ–ò–ï–ù–¢–£, –í–°–ï –ö–†–ê–°–û–¢–ê")

# -------------------------------
# –î–µ–Ω—å–≥–∏ –ø—Ä–∏—à–ª–∏
# -------------------------------
@router.message(Command("money_done"))
async def money_done_cmd(message: types.Message):
    try:
        _, amount = message.text.split()
        amount = int(amount)
    except:
        await message.answer("–§–û–†–ú–ê–¢ –ü–†–ê–í–ò–õ–¨–ù–´–ô, –ë–†–ê–¢: /money_done —Å—É–º–º–∞ üíµ")
        return

    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE user_id = %s AND status = %s ORDER BY id DESC LIMIT 1", (message.from_user.id, "accepted"))
    row = cur.fetchone()
    if not row:
        await message.answer("–≠–≠ –ë–†–ê–¢ ü§î –£ –¢–ï–ë–Ø –ó–ê–ö–ê–ó –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–ô, –ß–ï –ú–£–¢–ò–®–¨?")
        return

    cur.execute("UPDATE orders SET status = %s WHERE id = %s", ("paid", row["id"]))
    conn.commit()
    cur.close()
    conn.close()

    await message.answer("üíµ –î–ï–ù–¨–ì–ê –ü–û–õ–£–ß–ò–õ –Ø, –ë–†–ê–¢! –ñ–î–ò –ü–û–°–´–õ–ö–ê, –°–ö–û–†–û –ü–†–ò–î–ï–¢ üöö")
    await message.bot.send_message(COURIER_ID, f"üî• –î–ï–ù–¨–ì–ê –û–¢ {message.from_user.id} ({amount} –ú–û–ù–ï–¢). –ë–†–ê–¢, –ì–ê–ó–£–ô –ù–ê–•–£–ô, –ü–û–°–´–õ–ö–ê –í–ï–ó–ò –ë–´–°–¢–†–û!")

# -------------------------------
# –î–æ—Å—Ç–∞–≤–∫–∞
# -------------------------------
@router.message(Command("done"))
async def done_cmd(message: types.Message):
    if message.from_user.id != COURIER_ID:
        return

    try:
        _, order_id = message.text.split()
        order_id = int(order_id)
    except:
        await message.answer("–§–û–†–ú–ê–¢ –ë–†–ê–¢: /done order_id üì¶")
        return

    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
    row = cur.fetchone()

    if not row:
        await message.answer("–≠–≠–≠ –ë–†–ê–¢ üò° –ó–ê–ö–ê–ó –¢–ê–ö–û–ô –ù–ï–¢–£, –¢–´ –ß–¢–û –ü–†–ò–î–£–ú–ê–õ?")
        return

    cur.execute("UPDATE orders SET status = %s WHERE id = %s", ("delivered", order_id))
    conn.commit()
    cur.close()
    conn.close()

    await message.bot.send_message(row["user_id"], "üì¶ –ë–†–ê–ê–¢! –ü–û–°–´–õ–ö–ê –ü–†–ò–ï–•–ê–õ–ê, –ë–ï–†–ò –°–í–û–ô –®–¢–£–ö–ê üôå")
    await message.answer(f"‚úÖ –ó–ê–ö–ê–ó #{order_id} –ó–ê–ö–†–´–¢, –ë–†–ê–¢, –í–°–ï –ü–û –ö–†–ê–°–û–¢–ï")

# -------------------------------
# FastAPI + Webhook
# -------------------------------
app = FastAPI()
bot = Bot(token=TOKEN)
dp = Dispatcher()
dp.include_router(router)

@app.on_event("startup")
async def on_startup():
    logging.basicConfig(level=logging.INFO)
    init_db()
    await bot.set_webhook(WEBHOOK_URL)

@app.post("/webhook")
async def webhook(request: Request):
    update = await request.json()
    await dp.feed_raw_update(bot, update)
    return {"status": "ok"}

# -------------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------------
if __name__ == "__main__":
    uvicorn.run("bot:app", host=WEBAPP_HOST, port=WEBAPP_PORT)
import asyncio
import logging
import os
import psycopg2
from psycopg2.extras import RealDictCursor
import urllib.parse as up
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from fastapi import FastAPI, Request
import uvicorn
