import logging
import os
import psycopg2
from psycopg2.extras import RealDictCursor
import urllib.parse as up

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from fastapi import FastAPI, Request
import uvicorn

# -------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------------
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN", "8400963211:AAEau9lHdOK6SOCOAyykOEkWLswxs3JS42g")
COURIER_ID = int(os.getenv("COURIER_ID", 1452105851))
DB_URL = os.getenv(
    "DATABASE_URL",
    "postgresql://lol_bot_mine_user:zaNVubL3czJHIQcdZWK1TNRMiBj0BAf9@dpg-d361tfnfte5s739cd29g-a.oregon-postgres.render.com/lol_bot_mine"
)
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://mine-bot-ufhg.onrender.com/webhook")
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

# -------------------------------
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
# -------------------------------
def get_conn():
    up.uses_netloc.append("postgres")
    url = up.urlparse(DB_URL)
    return psycopg2.connect(
        database=url.path[1:],
        user=url.username,
        password=url.password,
        host=url.hostname,
        port=url.port or 5432,
        sslmode="require",
        cursor_factory=RealDictCursor
    )

def init_db():
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            item TEXT NOT NULL,
            quantity INT NOT NULL DEFAULT 1,
            price INT,
            status TEXT NOT NULL
        );
    """)
    conn.commit()
    cur.close()
    conn.close()

# -------------------------------
# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
# -------------------------------
class OrderState(StatesGroup):
    waiting_for_item = State()
    waiting_for_quantity = State()

# -------------------------------
# Router / Dispatcher
# -------------------------------
router = Router()
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
dp.include_router(router)

# -------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /help
# -------------------------------
@router.message(Command("help"))
async def help_cmd(message: types.Message):
    if message.from_user.id == COURIER_ID:
        # –î–ª—è –∞–¥–º–∏–Ω–∞
        text = (
            "‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            "/answer <id> <—Ü–µ–Ω–∞> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ –∑–∞–∫–∞–∑\n"
            "/done <id> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º\n"
            "/admin_cancel <id> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
            "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
        )
    else:
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text = (
            "üìñ –ö–æ–º–∞–Ω–¥—ã –∫–ª–∏–µ–Ω—Ç–∞:\n\n"
            "/order ‚Äî —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n"
            "/money_done <—Å—É–º–º–∞> ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑\n"
            "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
        )
    # –ë–µ–∑ parse_mode, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    await message.answer(text)

# -------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# -------------------------------
@router.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤.\n"
        "–ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )

# -------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /order
# -------------------------------
@router.message(Command("order"))
async def order_cmd(message: types.Message, state: FSMContext):
    await message.answer("üì¶ –ß—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å? –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
    await state.set_state(OrderState.waiting_for_item)

@router.message(OrderState.waiting_for_item)
async def process_item(message: types.Message, state: FSMContext):
    await state.update_data(item=message.text.strip())
    await message.answer("üî¢ –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –Ω—É–∂–Ω–æ? (–≤–≤–µ–¥–∏ —á–∏—Å–ª–æ)")
    await state.set_state(OrderState.waiting_for_quantity)

@router.message(OrderState.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–ø—Ä–∏–º–µ—Ä: 10)")
        return

    data = await state.get_data()
    item = data.get("item", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    conn = get_conn()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO orders (user_id, item, quantity, status) VALUES (%s, %s, %s, %s) RETURNING id",
        (message.from_user.id, item, quantity, "waiting_price")
    )
    order_id = cur.fetchone()["id"]
    conn.commit()
    cur.close()
    conn.close()

    await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω: {item} x{quantity}")
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä—å–µ—Ä–∞
    await message.bot.send_message(
        COURIER_ID,
        f"üö® –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}: {item} x{quantity}\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
    )

# -------------------------------
# –ö—É—Ä—å–µ—Ä —Å—Ç–∞–≤–∏—Ç —Ü–µ–Ω—É (/answer)
# -------------------------------
@router.message(Command("answer"))
async def answer_cmd(message: types.Message):
    if message.from_user.id != COURIER_ID:
        return

    try:
        _, order_id, price = message.text.split()
        order_id = int(order_id)
        price = int(price)
    except ValueError:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /answer order_id price")
        return

    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE id = %s AND status = %s", (order_id, "waiting_price"))
    row = cur.fetchone()
    if not row:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        cur.close()
        conn.close()
        return

    cur.execute(
        "UPDATE orders SET price = %s, status = %s WHERE id = %s",
        (price, "waiting_user_confirm", order_id)
    )
    conn.commit()
    cur.close()
    conn.close()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"accept_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"reject_{order_id}")]
    ])
    await message.bot.send_message(
        row["user_id"],
        f"üí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç –∑–∞ {row['quantity']} —à—Ç.\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å?",
        reply_markup=keyboard
    )
    await message.answer("‚úÖ –¶–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É")

# -------------------------------
# –ö–Ω–æ–ø–∫–∏: –ø—Ä–∏–Ω—è—Ç—å / –æ—Ç–∫–∞–∑
# -------------------------------
@router.callback_query(F.data.startswith("accept_"))
async def accept_order(callback: types.CallbackQuery):
    # –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback (–≤–∞–∂–Ω–æ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤)
    await callback.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é...", show_alert=False)

    order_id = int(callback.data.split("_", 1)[1])
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
    row = cur.fetchone()
    if not row:
        await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        cur.close()
        conn.close()
        return

    cur.execute("UPDATE orders SET status = %s WHERE id = %s", ("accepted", order_id))
    conn.commit()
    cur.close()
    conn.close()

    await callback.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –æ–ø–ª–∞—Ç–∏: /money_done <—Å—É–º–º–∞>")

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä—å–µ—Ä–∞
    await callback.bot.send_message(COURIER_ID, f"üì® –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ #{order_id} ‚Äî –º–æ–∂–Ω–æ –≤–µ–∑—Ç–∏.")

@router.callback_query(F.data.startswith("reject_"))
async def reject_order(callback: types.CallbackQuery):
    await callback.answer("–û—Ç–º–µ–Ω—è—é...", show_alert=False)

    order_id = int(callback.data.split("_", 1)[1])
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
    row = cur.fetchone()
    if not row:
        await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        cur.close()
        conn.close()
        return

    cur.execute("UPDATE orders SET status = %s WHERE id = %s", ("rejected", order_id))
    conn.commit()
    cur.close()
    conn.close()

    await callback.message.edit_text("‚ùå –¢—ã –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞")
    await callback.bot.send_message(COURIER_ID, f"üì® –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ #{order_id}")

# -------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ (/cancel)
# -------------------------------
@router.message(Command("cancel"))
async def cancel_cmd(message: types.Message):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute(
        "SELECT * FROM orders WHERE user_id = %s AND status IN ('waiting_price','waiting_user_confirm','accepted') ORDER BY id DESC LIMIT 1",
        (message.from_user.id,)
    )
    row = cur.fetchone()
    if not row:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        cur.close()
        conn.close()
        return

    cur.execute("UPDATE orders SET status = %s WHERE id = %s", ("cancelled", row["id"]))
    conn.commit()
    cur.close()
    conn.close()

    await message.answer(f"üö´ –¢–≤–æ–π –∑–∞–∫–∞–∑ #{row['id']} –æ—Ç–º–µ–Ω—ë–Ω")
    await message.bot.send_message(COURIER_ID, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ #{row['id']}")

# -------------------------------
# –ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ (/admin_cancel)
# -------------------------------
@router.message(Command("admin_cancel"))
async def admin_cancel_cmd(message: types.Message):
    if message.from_user.id != COURIER_ID:
        return
    try:
        _, order_id = message.text.split()
        order_id = int(order_id)
    except ValueError:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /admin_cancel order_id")
        return

    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
    row = cur.fetchone()
    if not row:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç")
        cur.close()
        conn.close()
        return

    cur.execute("UPDATE orders SET status = %s WHERE id = %s", ("cancelled", order_id))
    conn.commit()
    cur.close()
    conn.close()

    await message.answer(f"üö´ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–æ–º")
    await message.bot.send_message(row["user_id"], f"‚ö†Ô∏è –¢–≤–æ–π –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–æ–º")

# -------------------------------
# –î–µ–Ω—å–≥–∏ –ø—Ä–∏—à–ª–∏ (/money_done)
# -------------------------------
@router.message(Command("money_done"))
async def money_done_cmd(message: types.Message):
    try:
        _, amount = message.text.split()
        amount = int(amount)
    except ValueError:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /money_done —Å—É–º–º–∞")
        return

    conn = get_conn()
    cur = conn.cursor()
    cur.execute(
        "SELECT * FROM orders WHERE user_id = %s AND status IN ('accepted','waiting_user_confirm') ORDER BY id DESC LIMIT 1",
        (message.from_user.id,)
    )
    row = cur.fetchone()
    if not row:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
        cur.close()
        conn.close()
        return

    cur.execute("UPDATE orders SET status = %s WHERE id = %s", ("paid", row["id"]))
    conn.commit()
    cur.close()
    conn.close()

    await message.answer("üíµ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ñ–¥–∏ –¥–æ—Å—Ç–∞–≤–∫—É üöö")
    await message.bot.send_message(COURIER_ID, f"üî• –û–ø–ª–∞—Ç–∞ –æ—Ç {message.from_user.id}: {amount} –º–æ–Ω–µ—Ç")

# -------------------------------
# –î–æ—Å—Ç–∞–≤–∫–∞ (/done)
# -------------------------------
@router.message(Command("done"))
async def done_cmd(message: types.Message):
    if message.from_user.id != COURIER_ID:
        return
    try:
        _, order_id = message.text.split()
        order_id = int(order_id)
    except ValueError:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /done order_id")
        return

    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
    row = cur.fetchone()
    if not row:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç")
        cur.close()
        conn.close()
        return

    cur.execute("UPDATE orders SET status = %s WHERE id = %s", ("delivered", order_id))
    conn.commit()
    cur.close()
    conn.close()

    await message.bot.send_message(row["user_id"], "üì¶ –¢–≤–æ–π –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! ‚úÖ")
    await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–∫—Ä—ã—Ç")

# -------------------------------
# FastAPI + Webhook
# -------------------------------
app = FastAPI()
bot = Bot(token=TOKEN)

@app.on_event("startup")
async def on_startup():
    logging.info("Starting bot, init DB and set webhook...")
    init_db()
    # set webhook
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set to: {WEBHOOK_URL}")

@app.post("/webhook")
async def webhook(request: Request):
    update = await request.json()
    logging.info(f"UPDATE RECEIVED: {update}")
    # –ø–µ—Ä–µ–¥–∞—ë–º "—Å—ã—Ä–æ–π" –∞–ø–¥–µ–π—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    await dp.feed_raw_update(bot, update)
    return {"status": "ok"}

# -------------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------------
if __name__ == "__main__":
    uvicorn.run("bot:app", host=WEBAPP_HOST, port=WEBAPP_PORT)
